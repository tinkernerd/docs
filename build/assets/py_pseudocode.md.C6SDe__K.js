import{_ as a,c as i,a3 as n,o as e}from"./chunks/framework.uL7cFZ_M.js";const c=JSON.parse('{"title":"Pseudocode","description":"","frontmatter":{"title":"Pseudocode","category":"Python","dateCreated":"2024-11-19T00:00:00.000Z","type":"Notes","tags":["pseudocode","python"],"outline":"deep"},"headers":[],"relativePath":"py/pseudocode.md","filePath":"py/pseudocode.md","lastUpdated":null}'),t={name:"py/pseudocode.md"};function l(p,s,o,h,d,r){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="pseudocode-in-python" tabindex="-1">Pseudocode in Python <a class="header-anchor" href="#pseudocode-in-python" aria-label="Permalink to &quot;Pseudocode in Python&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>Pseudocode is a high-level description of a program&#39;s logic that uses plain language to outline the steps of an algorithm. It bridges the gap between human understanding and actual code by focusing on logic without adhering to syntax rules of a programming language.</p><hr><h2 id="why-use-pseudocode" tabindex="-1">Why Use Pseudocode? <a class="header-anchor" href="#why-use-pseudocode" aria-label="Permalink to &quot;Why Use Pseudocode?&quot;">​</a></h2><ol><li><strong>Simplifies Logic</strong>: Focus on what needs to be done, not how.</li><li><strong>Enhances Collaboration</strong>: Non-technical team members can understand the plan.</li><li><strong>Improves Planning</strong>: Helps map out the program before coding.</li><li><strong>Eases Debugging</strong>: Logical steps are easier to debug and understand.</li></ol><hr><h2 id="guidelines-for-writing-pseudocode" tabindex="-1">Guidelines for Writing Pseudocode <a class="header-anchor" href="#guidelines-for-writing-pseudocode" aria-label="Permalink to &quot;Guidelines for Writing Pseudocode&quot;">​</a></h2><ol><li><strong>Use Simple Language</strong>: Write in clear, plain English.</li><li><strong>Focus on Logic</strong>: Avoid language-specific syntax.</li><li><strong>Be Structured</strong>: Use indentation for clarity and flow.</li><li><strong>Use Keywords</strong>: Incorporate keywords like <code>IF</code>, <code>ELSE</code>, <code>WHILE</code>, <code>FOR</code>, etc., for readability.</li><li><strong>Describe Steps</strong>: Include enough detail for a programmer to translate into actual code.</li></ol><hr><h2 id="common-keywords" tabindex="-1">Common Keywords <a class="header-anchor" href="#common-keywords" aria-label="Permalink to &quot;Common Keywords&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Keyword</th><th>Meaning</th></tr></thead><tbody><tr><td><code>IF</code></td><td>Conditional logic</td></tr><tr><td><code>ELSE</code></td><td>Alternate logic for <code>IF</code> conditions</td></tr><tr><td><code>FOR</code></td><td>Iteration through a set of items</td></tr><tr><td><code>WHILE</code></td><td>Repeat as long as a condition is true</td></tr><tr><td><code>RETURN</code></td><td>Provide output from a process</td></tr><tr><td><code>END</code></td><td>End of a block or statement</td></tr></tbody></table><hr><h2 id="example-basic-pseudocode" tabindex="-1">Example: Basic Pseudocode <a class="header-anchor" href="#example-basic-pseudocode" aria-label="Permalink to &quot;Example: Basic Pseudocode&quot;">​</a></h2><h3 id="problem-find-the-largest-number-in-a-list" tabindex="-1">Problem: Find the largest number in a list. <a class="header-anchor" href="#problem-find-the-largest-number-in-a-list" aria-label="Permalink to &quot;Problem: Find the largest number in a list.&quot;">​</a></h3><p><strong>Pseudocode</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SET max_number TO first item in the list</span></span>
<span class="line"><span>FOR each number in the list</span></span>
<span class="line"><span>    IF number &gt; max_number THEN</span></span>
<span class="line"><span>        SET max_number TO number</span></span>
<span class="line"><span>    END IF</span></span>
<span class="line"><span>END FOR</span></span>
<span class="line"><span>RETURN max_number</span></span></code></pre></div><p><strong>Python Code</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">max_number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> max_number:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        max_number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(max_number)</span></span></code></pre></div><hr><h2 id="translating-pseudocode-to-python" tabindex="-1">Translating Pseudocode to Python <a class="header-anchor" href="#translating-pseudocode-to-python" aria-label="Permalink to &quot;Translating Pseudocode to Python&quot;">​</a></h2><h3 id="pseudocode-example-1-calculate-factorial" tabindex="-1">Pseudocode Example 1: Calculate Factorial <a class="header-anchor" href="#pseudocode-example-1-calculate-factorial" aria-label="Permalink to &quot;Pseudocode Example 1: Calculate Factorial&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SET result TO 1</span></span>
<span class="line"><span>FOR i FROM 1 TO n</span></span>
<span class="line"><span>    MULTIPLY result BY i</span></span>
<span class="line"><span>END FOR</span></span>
<span class="line"><span>RETURN result</span></span></code></pre></div><p><strong>Python Code</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> factorial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(factorial(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Output: 120</span></span></code></pre></div><h3 id="pseudocode-example-2-check-if-a-number-is-prime" tabindex="-1">Pseudocode Example 2: Check if a Number is Prime <a class="header-anchor" href="#pseudocode-example-2-check-if-a-number-is-prime" aria-label="Permalink to &quot;Pseudocode Example 2: Check if a Number is Prime&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>IF number &lt;= 1 THEN</span></span>
<span class="line"><span>    RETURN False</span></span>
<span class="line"><span>END IF</span></span>
<span class="line"><span>FOR i FROM 2 TO square root of number</span></span>
<span class="line"><span>    IF number MODULO i IS 0 THEN</span></span>
<span class="line"><span>        RETURN False</span></span>
<span class="line"><span>    END IF</span></span>
<span class="line"><span>END FOR</span></span>
<span class="line"><span>RETURN True</span></span></code></pre></div><p><strong>Python Code</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> math</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> is_prime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(math.sqrt(number)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(is_prime(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Output: True</span></span></code></pre></div><hr><h2 id="pseudocode-for-common-constructs" tabindex="-1">Pseudocode for Common Constructs <a class="header-anchor" href="#pseudocode-for-common-constructs" aria-label="Permalink to &quot;Pseudocode for Common Constructs&quot;">​</a></h2><h3 id="conditional-statements" tabindex="-1">Conditional Statements <a class="header-anchor" href="#conditional-statements" aria-label="Permalink to &quot;Conditional Statements&quot;">​</a></h3><p><strong>Pseudocode</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>IF condition THEN</span></span>
<span class="line"><span>    Execute block A</span></span>
<span class="line"><span>ELSE</span></span>
<span class="line"><span>    Execute block B</span></span>
<span class="line"><span>END IF</span></span></code></pre></div><p><strong>Python Code</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> condition:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Block A</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Block B</span></span></code></pre></div><h3 id="loops" tabindex="-1">Loops <a class="header-anchor" href="#loops" aria-label="Permalink to &quot;Loops&quot;">​</a></h3><p><strong>FOR Loop Pseudocode</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>FOR each item in collection</span></span>
<span class="line"><span>    Execute block</span></span>
<span class="line"><span>END FOR</span></span></code></pre></div><p><strong>Python Code</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> collection:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Block</span></span></code></pre></div><p><strong>WHILE Loop Pseudocode</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>WHILE condition IS True</span></span>
<span class="line"><span>    Execute block</span></span>
<span class="line"><span>END WHILE</span></span></code></pre></div><p><strong>Python Code</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> condition:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Block</span></span></code></pre></div><hr><h2 id="benefits-of-pseudocode" tabindex="-1">Benefits of Pseudocode <a class="header-anchor" href="#benefits-of-pseudocode" aria-label="Permalink to &quot;Benefits of Pseudocode&quot;">​</a></h2><ol><li><strong>Language Agnostic</strong>: Focuses on logic, not syntax.</li><li><strong>Improves Code Quality</strong>: Encourages pre-planning and clear structure.</li><li><strong>Simplifies Collaboration</strong>: Easier for teams to brainstorm and align.</li></ol><hr><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><ol><li>Pseudocode is an essential tool for planning and structuring algorithms before implementation.</li><li>Use simple, clear language and follow logical flow.</li><li>Translate pseudocode into Python by mapping keywords and logical steps into code constructs.</li></ol>`,51)]))}const g=a(t,[["render",l]]);export{c as __pageData,g as default};
