import{_ as t,c as a,a3 as n,o as s}from"./chunks/framework.uL7cFZ_M.js";const c=JSON.parse('{"title":"PyNet","description":"","frontmatter":{"title":"PyNet","outline":"deep"},"headers":[],"relativePath":"py/pynet.md","filePath":"py/pynet.md","lastUpdated":1731953090000}'),r={name:"py/pynet.md"};function o(i,e,d,l,p,h){return s(),a("div",null,e[0]||(e[0]=[n('<h1 id="pynet" tabindex="-1">PyNet <a class="header-anchor" href="#pynet" aria-label="Permalink to &quot;PyNet&quot;">​</a></h1><h2 id="github-link" tabindex="-1">GitHub Link: <a class="header-anchor" href="#github-link" aria-label="Permalink to &quot;GitHub Link:&quot;">​</a></h2><ul><li><a href="https://www.github.com/tinkernerd/Net_Tools" target="_blank" rel="noreferrer">tinkernerd/Net_Tools</a></li></ul><h1 id="net-tools" tabindex="-1">Net_Tools <a class="header-anchor" href="#net-tools" aria-label="Permalink to &quot;Net_Tools&quot;">​</a></h1><p>Made a python script that intakes 2 ip addresses and the subnet. binandify.py It returns the binary conversions for the ip addresses and the subnet mask and wether or not it belongs to the same network.</p><p>net-info.py this script takes in an ip address and returns the ip address, the subnet mask, the network address, the broadcast address, and the first and last usable ip addresses.s</p>',6)]))}const b=t(r,[["render",o]]);export{c as __pageData,b as default};
