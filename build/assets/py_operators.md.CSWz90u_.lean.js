import{_ as d,c as e,a3 as o,o as r}from"./chunks/framework.uL7cFZ_M.js";const u=JSON.parse('{"title":"Operators","description":"","frontmatter":{"title":"Operators","category":"Python","dateCreated":"2024-11-19T00:00:00.000Z","type":"Notes","tags":["operators","python"],"outline":"deep"},"headers":[],"relativePath":"py/operators.md","filePath":"py/operators.md","lastUpdated":null}'),a={name:"py/operators.md"};function i(c,t,s,n,l,h){return r(),e("div",null,t[0]||(t[0]=[o('<h1 id="operators-in-python" tabindex="-1">Operators in Python <a class="header-anchor" href="#operators-in-python" aria-label="Permalink to &quot;Operators in Python&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>Operators are special symbols or keywords used to perform operations on variables and values. Python supports several categories of operators, including:</p><ol><li>Arithmetic Operators</li><li>Comparison Operators</li><li>Logical Operators</li><li>Bitwise Operators</li><li>Assignment Operators</li><li>Identity Operators</li><li>Membership Operators</li></ol><hr><h2 id="arithmetic-operators" tabindex="-1">Arithmetic Operators <a class="header-anchor" href="#arithmetic-operators" aria-label="Permalink to &quot;Arithmetic Operators&quot;">​</a></h2><p>Used to perform mathematical operations.</p><table tabindex="0"><thead><tr><th>Operator</th><th>Description</th><th>Example</th><th>Output</th></tr></thead><tbody><tr><td><code>+</code></td><td>Addition</td><td><code>5 + 3</code></td><td><code>8</code></td></tr><tr><td><code>-</code></td><td>Subtraction</td><td><code>5 - 3</code></td><td><code>2</code></td></tr><tr><td><code>*</code></td><td>Multiplication</td><td><code>5 * 3</code></td><td><code>15</code></td></tr><tr><td><code>/</code></td><td>Division</td><td><code>5 / 2</code></td><td><code>2.5</code></td></tr><tr><td><code>//</code></td><td>Floor Division (no float)</td><td><code>5 // 2</code></td><td><code>2</code></td></tr><tr><td><code>%</code></td><td>Modulus (remainder)</td><td><code>5 % 2</code></td><td><code>1</code></td></tr><tr><td><code>**</code></td><td>Exponentiation</td><td><code>5 ** 2</code></td><td><code>25</code></td></tr></tbody></table><hr><h2 id="comparison-operators" tabindex="-1">Comparison Operators <a class="header-anchor" href="#comparison-operators" aria-label="Permalink to &quot;Comparison Operators&quot;">​</a></h2><p>Used to compare two values and return a Boolean (<code>True</code> or <code>False</code>).</p><table tabindex="0"><thead><tr><th>Operator</th><th>Description</th><th>Example</th><th>Output</th></tr></thead><tbody><tr><td><code>==</code></td><td>Equal to</td><td><code>5 == 5</code></td><td><code>True</code></td></tr><tr><td><code>!=</code></td><td>Not equal to</td><td><code>5 != 3</code></td><td><code>True</code></td></tr><tr><td><code>&gt;</code></td><td>Greater than</td><td><code>5 &gt; 3</code></td><td><code>True</code></td></tr><tr><td><code>&lt;</code></td><td>Less than</td><td><code>5 &lt; 3</code></td><td><code>False</code></td></tr><tr><td><code>&gt;=</code></td><td>Greater than or equal to</td><td><code>5 &gt;= 5</code></td><td><code>True</code></td></tr><tr><td><code>&lt;=</code></td><td>Less than or equal to</td><td><code>5 &lt;= 3</code></td><td><code>False</code></td></tr></tbody></table><hr><h2 id="logical-operators" tabindex="-1">Logical Operators <a class="header-anchor" href="#logical-operators" aria-label="Permalink to &quot;Logical Operators&quot;">​</a></h2><p>Used to combine conditional statements.</p><table tabindex="0"><thead><tr><th>Operator</th><th>Description</th><th>Example</th><th>Output</th></tr></thead><tbody><tr><td><code>and</code></td><td>Returns <code>True</code> if both are <code>True</code></td><td><code>True and False</code></td><td><code>False</code></td></tr><tr><td><code>or</code></td><td>Returns <code>True</code> if one is <code>True</code></td><td><code>True or False</code></td><td><code>True</code></td></tr><tr><td><code>not</code></td><td>Reverses the result</td><td><code>not True</code></td><td><code>False</code></td></tr></tbody></table><hr><h2 id="bitwise-operators" tabindex="-1">Bitwise Operators <a class="header-anchor" href="#bitwise-operators" aria-label="Permalink to &quot;Bitwise Operators&quot;">​</a></h2><p>Used to perform bit-level operations.</p><table tabindex="0"><thead><tr><th>Operator</th><th>Description</th><th>Example</th><th>Output</th></tr></thead><tbody><tr><td><code>&amp;</code></td><td>Bitwise AND</td><td><code>5 &amp; 3</code></td><td><code>1</code></td></tr><tr><td>`</td><td>`</td><td>Bitwise OR</td><td>`5</td></tr><tr><td><code>~</code></td><td>Bitwise NOT</td><td><code>~5</code></td><td><code>-6</code></td></tr><tr><td><code>^</code></td><td>Bitwise XOR</td><td><code>5 ^ 3</code></td><td><code>6</code></td></tr><tr><td><code>&gt;&gt;</code></td><td>Right shift</td><td><code>5 &gt;&gt; 1</code></td><td><code>2</code></td></tr><tr><td><code>&lt;&lt;</code></td><td>Left shift</td><td><code>5 &lt;&lt; 1</code></td><td><code>10</code></td></tr></tbody></table><hr><h2 id="assignment-operators" tabindex="-1">Assignment Operators <a class="header-anchor" href="#assignment-operators" aria-label="Permalink to &quot;Assignment Operators&quot;">​</a></h2><p>Used to assign values to variables.</p><table tabindex="0"><thead><tr><th>Operator</th><th>Description</th><th>Example</th><th>Output</th></tr></thead><tbody><tr><td><code>=</code></td><td>Assign</td><td><code>x = 5</code></td><td><code>5</code></td></tr><tr><td><code>+=</code></td><td>Add and assign</td><td><code>x += 3</code></td><td><code>8</code></td></tr><tr><td><code>-=</code></td><td>Subtract and assign</td><td><code>x -= 3</code></td><td><code>2</code></td></tr><tr><td><code>*=</code></td><td>Multiply and assign</td><td><code>x *= 3</code></td><td><code>15</code></td></tr><tr><td><code>/=</code></td><td>Divide and assign</td><td><code>x /= 3</code></td><td><code>1.67</code></td></tr><tr><td><code>//=</code></td><td>Floor divide and assign</td><td><code>x //= 3</code></td><td><code>1</code></td></tr><tr><td><code>%=</code></td><td>Modulus and assign</td><td><code>x %= 3</code></td><td><code>2</code></td></tr><tr><td><code>**=</code></td><td>Exponent and assign</td><td><code>x **= 3</code></td><td><code>125</code></td></tr><tr><td><code>&amp;=</code></td><td>Bitwise AND and assign</td><td><code>x &amp;= 3</code></td><td>Depends</td></tr><tr><td><code>|=</code></td><td>Bitwise OR and assign</td><td><code>x |= 3</code></td><td>Depends</td></tr><tr><td><code>^=</code></td><td>Bitwise XOR and assign</td><td><code>x ^= 3</code></td><td>Depends</td></tr><tr><td><code>&gt;&gt;=</code></td><td>Right shift and assign</td><td><code>x &gt;&gt;= 3</code></td><td>Depends</td></tr><tr><td><code>&lt;&lt;=</code></td><td>Left shift and assign</td><td><code>x &lt;&lt;= 3</code></td><td>Depends</td></tr></tbody></table><hr><h2 id="identity-operators" tabindex="-1">Identity Operators <a class="header-anchor" href="#identity-operators" aria-label="Permalink to &quot;Identity Operators&quot;">​</a></h2><p>Used to compare the memory location of two objects.</p><table tabindex="0"><thead><tr><th>Operator</th><th>Description</th><th>Example</th><th>Output</th></tr></thead><tbody><tr><td><code>is</code></td><td>Returns <code>True</code> if objects are the same</td><td><code>x is y</code></td><td><code>True</code></td></tr><tr><td><code>is not</code></td><td>Returns <code>True</code> if objects are different</td><td><code>x is not y</code></td><td><code>False</code></td></tr></tbody></table><hr><h2 id="membership-operators" tabindex="-1">Membership Operators <a class="header-anchor" href="#membership-operators" aria-label="Permalink to &quot;Membership Operators&quot;">​</a></h2><p>Used to test if a sequence contains an item.</p><table tabindex="0"><thead><tr><th>Operator</th><th>Description</th><th>Example</th><th>Output</th></tr></thead><tbody><tr><td><code>in</code></td><td>Returns <code>True</code> if item exists</td><td><code>&#39;a&#39; in &#39;apple&#39;</code></td><td><code>True</code></td></tr><tr><td><code>not in</code></td><td>Returns <code>True</code> if item does not exist</td><td><code>&#39;b&#39; not in &#39;apple&#39;</code></td><td><code>True</code></td></tr></tbody></table><hr><h2 id="order-of-operations" tabindex="-1">Order of Operations <a class="header-anchor" href="#order-of-operations" aria-label="Permalink to &quot;Order of Operations&quot;">​</a></h2><p>Python follows the <strong>PEMDAS</strong> rule for operator precedence:</p><ol><li><strong>Parentheses</strong> <code>()</code></li><li><strong>Exponentiation</strong> <code>**</code></li><li><strong>Multiplication/Division/Modulus/Floor Division</strong> <code>*</code>, <code>/</code>, <code>%</code>, <code>//</code></li><li><strong>Addition/Subtraction</strong> <code>+</code>, <code>-</code></li><li><strong>Comparison Operators</strong> <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>==</code>, <code>!=</code></li><li><strong>Logical Operators</strong> <code>not</code>, <code>and</code>, <code>or</code></li></ol><p>Example:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> **</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Output: 32</span></span></code></pre></div><hr><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p>Python operators are essential tools for performing operations, comparisons, and manipulating data. Understanding their functionality and precedence allows for writing efficient and clear code.</p>',41)]))}const m=d(a,[["render",i]]);export{u as __pageData,m as default};
